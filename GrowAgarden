if not game:IsLoaded() then
    game.Loaded:Wait()
end

local marketplace_service = game:GetService("MarketplaceService")
local replicated_storage = game:GetService("ReplicatedStorage")
local collection_service = game:GetService("CollectionService")
local user_input_service = game:GetService("UserInputService")
local teleport_service = game:GetService("TeleportService")
local virtual_user = game:GetService("VirtualUser")
local run_service = game:GetService("RunService")
local workspace = game:GetService("Workspace")
local players = game:GetService("Players")
local stats = game:GetService("Stats")
local best_fruit = nil

local info = marketplace_service:GetProductInfo(game.PlaceId)
local get_gc = getconnections or get_signal_cons
local local_player = players.LocalPlayer
local backpack = local_player.Backpack
local camera = workspace.CurrentCamera

local farms = workspace:FindFirstChild("Farm")

if not farms then
    return local_player:Kick("Farms folder not found!")
end

local plot = nil

for _, v in farms:GetDescendants() do
    if v.Name == "Owner" and v.Value == local_player.Name then
        plot = v.Parent.Parent
        break
    end
end

if not plot then
    return local_player:Kick("Plot not found!")
end

local plant_physical = plot:FindFirstChild("Plants_Physical")

if not plant_physical then
    return local_player:Kick("Plant folder not found!")
end

local object_physical = plot:FindFirstChild("Objects_Physical")

if not object_physical then
    return local_player:Kick("Object folder not found!")
end

local data = replicated_storage:FindFirstChild("Data")

if not data then
    return local_player:Kick("Data folder not found!")
end

local seed_data = require(data:FindFirstChild("SeedData"))

if not seed_data then
    return local_player:Kick("Seed data not found!")
end

local egg_data = require(data:FindFirstChild("PetEggData"))

if not egg_data then
    return local_player:Kick("Egg data not found!")
end

local gear_data = require(data:FindFirstChild("GearData"))

if not gear_data then
    return local_player:Kick("Gear data not found!")
end

local cosmetic_data = require(data:FindFirstChild("CosmeticItemShopData"))

if not cosmetic_data then
    return local_player:Kick("Cosmetic data not found!")
end

local modules = replicated_storage:FindFirstChild("Modules")

if not modules then
    return local_player:Kick("Modules folder not found!")
end

local caluculate_plant_value = require(modules:FindFirstChild("CalculatePlantValue"))

if not caluculate_plant_value then
    return local_player:Kick("Plant value calculator module not found!")
end

local calculate_pet_value = require(modules:FindFirstChild("CalculatePetValue"))

if not calculate_pet_value then
    return local_player:Kick("Pet value calculator module not found!")
end

local mutation_handler = require(modules:FindFirstChild("MutationHandler"))

if not mutation_handler then
    return local_player:Kick("Mutation handler module not found!")
end

local hatch = getupvalue(getupvalue(getconnections(replicated_storage.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local pet_list = getupvalue(hatch, 2)

-- idk if devs will change this soon
local inventory_enums = {
    ["OWNER"]             = "a",
    ["ITEM_TYPE"]         = "b",
    ["ITEM_UUID"]         = "c",
    ["Favorite"]          = "d",
    ["Uses"]              = "e",
    ["ItemName"]          = "f",
    ["Rarity"]            = "g",
    ["EggName"]           = "h",
    ["CrateType"]         = "i",
    ["PotType"]           = "j",
    ["LinkedPlayerID"]    = "k",
    ["SprayType"]         = "l",
    ["SprayMutationName"] = "m",
    ["Type"]              = "n"
}

local item_types = {
    ["Seed Pack"]         = "a",
    ["Trowel"]            = "b",
    ["PetEgg"]            = "c",
    ["Sprinkler"]         = "d",
    ["Night Staff"]       = "e",
    ["Harvest Tool"]      = "f",
    ["Pollen Radar"]      = "g",
    ["Favorite Tool"]     = "h",
    ["Lightning Rod"]     = "i",
    ["Holdable"]          = "j",
    ["Star Caller"]       = "k",
    ["Pet"]               = "l",
    ["FriendshipPot"]     = "m",
    ["Seed"]              = "n",
    ["Watering Can"]      = "o",
    ["Nectar Staff"]      = "p",
    ["Recall Wrench"]     = "q",
    ["CosmeticCrate"]     = "r",
    ["SprayBottle"]       = "s"
}

function calculate_combined_plant_value()
    local total_plant_value = 0
    for _, v in backpack:GetChildren() do
        if v:IsA("Tool") then
            local tool = v
            local item_type = v:GetAttribute(inventory_enums.ITEM_TYPE)
            if item_type == item_types.Holdable then
                local value = caluculate_plant_value(tool)
                total_plant_value += value
            end
        end
    end
    return total_plant_value
end

function calculate_combined_pet_value()
    local total_pet_value = 0
    for _, v in backpack:GetChildren() do
        if v:IsA("Tool") then
            local tool = v
            local item_type = v:GetAttribute(inventory_enums.ITEM_TYPE)
            if item_type == item_types.Pet then
                local value = calculate_pet_value(tool)
                total_pet_value += value
            end
        end
    end
    return total_pet_value
end

function check_staff(v)
    local rank = v:GetRankInGroup(35302026)
    if rank and rank > 2 then
        return true
    end
end

function closest_plant()
    local plant = nil
    local dist = 9e99
    for _, v in plant_physical:GetDescendants() do
        if v:IsA("ProximityPrompt") and v.Parent then
            local distance = (v.Parent.Parent:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude
            if distance < dist then
                dist = distance
                plant = v.Parent.Parent
            end
        end
    end
    return plant
end

function get_tool()
    return local_player.Character:FindFirstChildOfClass("Tool")
end

function is_full()
    return #backpack:GetChildren() > 200
end

local auto_favorite_selected_mutations = {}
local selected_cosmetic = {}
local stored_players = {}
local selected_seeds = {}
local cosmetic_names = {}
local mutation_names = {}
local selected_gear = {}
local selected_eggs = {}
local gear_names = {}
local seed_names = {}
local egg_names = {}

function get_players()
    for _, v in players:GetPlayers() do
        if v ~= local_player then
            table.insert(stored_players, v)
        end
    end
end

for _, v in cosmetic_data do
    table.insert(cosmetic_names, v.CosmeticName)
end

for _, v in gear_data do
    if v.StockChance > 0 then
        table.insert(gear_names, v.GearName)
    end
end

for _, v in egg_data do
    if v.StockChance > 0 then
        table.insert(egg_names, v.EggName)
    end
end

for i, v in seed_data do
    if v.StockChance > 0 then -- or if v.DisplayInShop then
        table.insert(seed_names, i)
    end
end

for i, _ in mutation_handler.MutationNames do
    table.insert(mutation_names, i)
end

table.insert(mutation_names, "Gold")
table.insert(mutation_names, "Rainbow")

local auto_buy_cosmetics = false
local auto_plant_seeds = false
local auto_place_eggs = false
local auto_buy_seeds = false
local auto_buy_gears = false
local auto_buy_eggs = false
local auto_favorite = false
local egg_predictor = false
local harvest_aura = false
local hatch_aura = false
local auto_sell = false
local inf_jump = false
local anti_afk = false

local selected_server_make_method = "" -- long name cuz idk what to call it
local selected_auto_sell_method = ""
local plant_seed_method = ""
local place_egg_method = ""

local selected_position_plant = nil
local selected_positon_hatch = nil

local auto_buy_cosmetic_delay = 1
local min_pickup_harvest_aura = 0.1
local min_favorite_favorite = 0.1
local auto_buy_seed_delay = 1
local auto_buy_gear_delay = 1
local auto_buy_egg_delay = 1
local favorite_delay = 0.1
local harvest_delay = 0.1
local hatch_delay = 0.1
local sell_delay = 1

function update()
    if #object_physical:GetChildren() > 0 and egg_predictor then
        for _, v in object_physical:GetChildren() do

            if (not v:GetAttribute("TimeToHatch") == 0) then
                continue
            end
            local screen_position, on_screen = camera:WorldToViewportPoint(v:GetPivot().Position)

            if (not on_screen) then
                continue
            end

            local uuid = v:GetAttribute("OBJECT_UUID")
            local egg_name = v:GetAttribute("EggName") or "Unknown Egg"
            local pet = pet_list[uuid] or "Unknown Pet"

            local text = Drawing.new("Text")
            text.Visible = true
            text.Text = egg_name.." | "..pet
            text.Size = 18
            text.Position = Vector2.new(screen_position.X, screen_position.Y)
            text.Color = Color3.new(1, 1, 1)
            text.Outline = true
            text.OutlineColor = Color3.new(0, 0, 0)
            text.Center = true
            text.Font = 2
        end
    end
end

local_player.Idled:Connect(function()
    if anti_afk then
        virtual_user:CaptureController()
        virtual_user:ClickButton2(Vector2.new())
    end
end)

user_input_service.JumpRequest:Connect(function()
    if inf_jump and not tweek_cmon_dont_do_it_unblock_me_faggot then
        tweek_cmon_dont_do_it_unblock_me_faggot = true
        local_player.Character.Humanoid:ChangeState("Jumping")
        wait()
        tweek_cmon_dont_do_it_unblock_me_faggot = false
    end
end)

local function tpAndSell()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        local returnCFrame = getOwnFarmSpawnCFrame()
        hrp.CFrame = CFrame.new(
            86.5854721, 2.76619363, 0.426784277,
            0, 0, -1,
            0, 1, 0,
            1, 0, 0
        )
        task.wait(0.2)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
        Library:Notify("Teleported and sold inventory!")
        if returnCFrame then
            task.wait(0.2)
            hrp.CFrame = returnCFrame
            Library:Notify("Returned to your garden spawn point!")
        else
            Library:Notify("Could not find your garden spawn point!")
        end
    else
        Library:Notify("HumanoidRootPart not found!")
    end
end

local validSeeds = {
   "Carrot", "Strawberry", "Blueberry", "Tomato", "Cauliflower", "Watermelon", "Green Apple", "Avocado", "Banana", "Pineapple", "Kiwi", "Bell Pepper", "Prickly Pear", "Loquat", "Feljoa"
}

local selectedSeed = validSeeds[1]
local buyingAll = false
local autoBuying = false
local autoBuyingAll = false

local rs = game:GetService("ReplicatedStorage")
local buyEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("BuySeedStock")

local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()

local Window = redzlib:MakeWindow({
  Title = "AngkorWat | Grow A Garden",
  SubTitle = "by manuth",
  SaveFolder = "testando | redz lib v5.lua"
})

local Tab1 = Window:MakeTab({"Main", "cherry"})
local Tab2 = Window:MakeTab({"egg", "cherry"})
local Tab3 = Window:MakeTab({"shop", "cherry"})

---Main---

Tab1:AddToggle({
    Name = "Auto collect fruit",
    Default = false,
    Callback = function(Value)
        harvest_aura = Value
        if Value then
            repeat
                if not is_full() then
                    for _, v in plant_physical:GetDescendants() do
                        if v:IsA("ProximityPrompt") and v.Parent and v.Parent.Parent:FindFirstChild("Weight") and v.Parent.Parent:FindFirstChild("Variant") then -- ill add variant check someday fr....
                            if v.Parent.Parent.Weight.Value >= tonumber(min_pickup_harvest_aura) and (v.Parent.Parent:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude < v.MaxActivationDistance * 2 then
                                fireproximityprompt(v)
                                task.wait(harvest_delay)
                            end
                        end
                    end 
                end
                task.wait()
            until not harvest_aura
        end

    end
})

Tab1:AddSlider({
  Name = "harvest delay",
  Min = 0,
  Max = 10,
  Increase = 1,
  Default = 16,
  Callback = function(Value)
        harvest_delay = Value
        if Value == 0 then
            library:Notify("Delay at 0 is not recommended as it may cause lag")
        end
  end
})

Tab1:AddTextBox({
  Name = "Min pick up harvest",
  Description = "1 Item on 1 Server", 
  PlaceholderText = "min_pickup_harvest_aura",
  Callback = function(Value)
         min_pickup_harvest_aura = Value
  end
})

Tab1:AddToggle({
    Name = "Auto Plant Seeds",
    Default = false,
    Callback = function(Value)
        auto_plant_seeds = Value
        if Value then
            repeat
                if plant_seed_method == "Selected Position" and not selected_position then
                    return library:Notify("You need to set a position first")
                end
                if plant_seed_method == "" then
                    return library:Notify("You need to select a method first")
                end
                for _, v in backpack:GetChildren() do
                    if v:IsA("Tool") and v:GetAttribute(inventory_enums.ITEM_TYPE) == item_types.Seed then
                        local_player.Character.Humanoid:EquipTool(v)
                        local tool = get_tool()
                        if tool and tool:GetAttribute("Seed") and tool:GetAttribute("Quantity") then
                            for i = 1, tool:GetAttribute("Quantity") do
                                if plant_seed_method == "Player Position" then
                                    replicated_storage:WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(local_player.Character:GetPivot().Position, tool:GetAttribute("Seed"))
                                    task.wait(.25)
                                elseif plant_seed_method == "Selected Position" then
                                    replicated_storage:WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(selected_position, tool:GetAttribute("Seed"))
                                    task.wait(.25)
                                end
                            end
                        end
                    end
                end
                task.wait()
            until not auto_plant_seeds
        end
    end
})

local Dropdown = Tab1:AddDropdown({
  Name = "Plant seed method",
  Description = "Select the <font color='rgb(88, 101, 242)'>Number</font>",
  Options = {"Player Position", "Selected Position"},
  Default = "two",
  Flag = "dropdown teste",
  Callback = function(Value)
         plant_seed_method = Value
  end
})

Tab1:AddToggle({
    Name = "Auto Plant Seeds",
    Default = false,
    Callback = function()
        local player = game.Players.LocalPlayer
        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        if not tool then return end

        local baseName = tool.Name:match("^(.-)%s+[Ss]eed") or tool.Name
        baseName = baseName:gsub("%s+$", "")

        local direction = (y - x).Unit
        local distance = (y - x).Magnitude
        for i = 0, distance, step do
            local pos = x + direction * i
            Plant:FireServer(pos, baseName)
            task.wait()
        end
    end
})

Tab1:AddButton({"sell fruit inventory", function()
          local sellPos = CFrame.new(90.08035, 0.98381, 3.02662)
      local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
      if hrp then
         local orig = hrp.CFrame
         hrp.CFrame = sellPos
         task.wait(0.1)
         rs.GameEvents.Sell_Inventory:FireServer()
         task.wait(0.1)
         hrp.CFrame = orig
      end
print("Hello World!")
end})

Tab1:AddButton({"hold to sell inventory", function()
          local sellPos = CFrame.new(90.08035, 0.98381, 3.02662)
      local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
      if hrp then
         local orig = hrp.CFrame
         hrp.CFrame = sellPos
         task.wait(0.1)
         rs.GameEvents.Sell_Inventory:FireServer()
         task.wait(0.1)
         hrp.CFrame = orig
      end
print("Hello World!")
end})

---egg---

Tab2:AddToggle({
    Name = "hatch egg",
    Default = false,
    Callback = function(Value)
        hatch_aura = Value
        if Value then
            repeat
                for _, v in object_physical:GetDescendants() do
                    if v.Name == "ProximityPrompt" and v.Parent.Parent:GetAttribute("TimeToHatch") == 0 then
                        if (v.Parent.Parent:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude < v.MaxActivationDistance * 2 then
                            fireproximityprompt(v)
                            task.wait(hatch_delay)
                        end
                    end 
                end
                task.wait()
            until not hatch_aura
        end
    end
})

Tab2:AddSlider({
  Name = "Hatch delay",
  Min = 0,
  Max = 10,
  Increase = 1,
  Default = 16,
  Callback = function(Value)
        hatch_delay = Value
        if Value == 0 then
            library:Notify("Delay at 0 is not recommended as it may cause lag!")
        end
    end
})

Tab2:AddToggle({
    Name = "auto place eggs",
    Default = false,
    Callback = function(Value)
        auto_place_eggs = Value
        if Value then
            if place_egg_method == "" then
                return library:Notify("You need to select a method first!")
            end
            if place_egg_method == "Selected Position" and not selected_position_egg then
                return library:Notify("You need to set a position first!")
            end
            repeat
                if #object_physical:GetChildren() < 3 then
                    for _, v in backpack:GetChildren() do
                        if v:IsA("Tool") and v:GetAttribute(inventory_enums.ITEM_TYPE) == item_types.PetEgg then
                            local_player.Character.Humanoid:EquipTool(v)
                            local tool = get_tool()
                            if tool and tool:GetAttribute(inventory_enums.Uses) then
                                for i = 1, tool:GetAttribute(inventory_enums.Uses) do
                                    if place_egg_method == "Player Position" then
                                        replicated_storage:WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer("CreateEgg", local_player.Character:GetPivot().Position)
                                        task.wait(.25)
                                    elseif place_egg_method == "Selected Position" then
                                        replicated_storage:WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer("CreateEgg", selected_position_egg)
                                        task.wait(.25)
                                    end
                                end
                            end
                        end
                    end
                end
                task.wait()
            until not auto_place_eggs
        end
    end
})

Tab2:AddToggle({
    Name = "egg predictor",
    Default = false,
    Callback = function(Value)
        egg_predictor = Value
    end
})

---shop--

Tab3:AddButton({"seed shop", function()
      local gui = game:GetService("Players").LocalPlayer.PlayerGui
      gui.Seed_Shop.Enabled = true
      gui.Gear_Shop.Enabled = false
      gui.HoneyEventShop_UI.Enabled = false
      gui.CosmeticShop_UI.Enabled = false
print("Hello World!")
end})

Tab3:AddButton({"Gear shop", function()
      local gui = game:GetService("Players").LocalPlayer.PlayerGui
      gui.Seed_Shop.Enabled = false
      gui.Gear_Shop.Enabled = true
      gui.HoneyEventShop_UI.Enabled = false
      gui.CosmeticShop_UI.Enabled = false
print("Hello World!")
end})

Tab3:AddButton({"Cosmetic Shop", function()
      gui.Seed_Shop.Enabled = false
      gui.Gear_Shop.Enabled = false
      gui.HoneyEventShop_UI.Enabled = false
      gui.CosmeticShop_UI.Enabled = true
print("Hello World!")
end})

Tab3:AddButton({"Event shop", function()
      gui.Seed_Shop.Enabled = false
      gui.Gear_Shop.Enabled = false
      gui.DinoEventShop_UI.Enabled = true
      gui.CosmeticShop_UI.Enabled = false
print("Hello World!")
end})
